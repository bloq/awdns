#!/usr/bin/env node

'use strict';

const AWS = require('aws-sdk');
const route53 = new AWS.Route53();
const pjson = require('../package.json');
const ip6addr = require('ip6addr');
const {parseDomain, ParseResultType} = require("parse-domain");

const { Command } = require('commander');
const program = new Command();

const reId = new RegExp('/([^/]+)$');

program.version(pjson.version);

program
  .command('add <FQDN> <address>')
  .description('Add A or AAAA record to zone')
  .action(cmd_add_record);

program
  .command('ls <id>')
  .description('List all records for zone')
  .action(cmd_list_records);

program
  .command('zones')
  .description('List all zones')
  .action(cmd_list_zones);

program.parse(process.argv);

function shortZoneId(longId) {
  const matches = reId.exec(longId);
  if (matches) return matches[1];
  return null;
}

function getZoneList() {
  const params = {};

  const p = route53.listHostedZones(params).promise();
  return p.then(function(data) {
    if (data.IsTruncated) {
      console.warn("TODO - Record data truncated");
    }
    return data.HostedZones;
  });
}

function lookupZoneId(name) {
  const p = getZoneList();
  return p.then(function(zoneList) {
    var match = null;
    zoneList.forEach(function(zone) {
      if (name === zone.Name) match = zone.Id;
    });

    return match;
  });
}

function getRecordList(id) {
  const params = {
    HostedZoneId: id,
  };

  const p = route53.listResourceRecordSets(params).promise();
  return p.then(function(data) {
    if (data.IsTruncated) {
      console.warn("TODO - Record data truncated");
    }
    return data.ResourceRecordSets;
  });
}

function addZoneRecord(id, subDomain, rec_type, addrStr)
{
  console.log("ADD", id, subDomain, rec_type, addrStr);

  const params = {
    HostedZoneId: id,
    ChangeBatch: {
      Changes: [
        {
	  Action: 'CREATE',
	  ResourceRecordSet: {
	    Name: subDomain,
	    TTL: 300,
	    Type: rec_type,
	    ResourceRecords: [
	      { Value: addrStr },
	    ],
	  },
	},
      ],
    },
  };

  const p = route53.changeResourceRecordSets(params).promise();
  return p;
}

function print_zone(zone)
{
  var id = shortZoneId(zone.Id);
  console.log(id + "\t" + zone.Name);
}

function print_zone_list(data)
{
  data.forEach(function(zone) {
    print_zone(zone);
  });
}

function cmd_list_zones() {
  getZoneList()
    .then(print_zone_list)
    .catch(function(err) {
      console.error(err.message);
    });
}

function print_rec(rec) {
  if (rec.ResourceRecords.length > 0) {
    rec.ResourceRecords.forEach(function(rr) {
      console.log(rec.Name, rec.TTL, rec.Type, rr.Value);
    });
  } else if (rec.AliasTarget) {
    console.log(rec.Name, '-', rec.Type, rec.AliasTarget.DNSName);
  } else {
    console.log(rec.Name, '-', rec.Type, '?');
  }
}

function print_rec_list(data)
{
  data.forEach(function(rec) {
    print_rec(rec);
  });
}

function cmd_list_records(zoneId) {
  getRecordList(zoneId)
    .then(print_rec_list)
    .catch(function(err) {
      console.error(err.message);
    });
}

function cmd_add_record(fqdn, addrStr) {
  var re = /\.$/g;
  if (!re.test(fqdn)) {
    fqdn = fqdn + '.';
  }

  var addr = null;
  var dnr = null;
  try {
    addr = ip6addr.parse(addrStr);
    dnr = parseDomain(fqdn);
    if ((dnr.type === ParseResultType.Invalid) ||
        (dnr.type === ParseResultType.Ip)) {
      throw new Error("Invalid domain name: " + dn);
    }
  }
  catch (e) {
    console.error(e.message);
    return;
  }

  const {subDomains, domain, topLevelDomains} = dnr;
  const dn = domain + '.' + topLevelDomains + '.';

  var rec_type = (addr.kind() === 'ipv6' ? 'AAAA' : 'A');

  lookupZoneId(dn)
    .then(function(id) {
      if (!id) {
        console.error("zone not found:", dn_in);
	process.exit(1);
      }

      return addZoneRecord(id, fqdn, rec_type, addrStr);
    }).then(function(added) {
      console.log("SUCCESS_RECEIPT", added);
    })
    .catch(function(err) {
      console.error(err.message);
    });
}

