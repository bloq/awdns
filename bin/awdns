#!/usr/bin/env node

'use strict';

const DefaultTTL = 300;

const util = require('util');
const AWS = require('aws-sdk');
const route53 = new AWS.Route53();
const pjson = require('../package.json');
const ip6addr = require('ip6addr');
const {parseDomain, ParseResultType} = require("parse-domain");

const { Command } = require('commander');
const program = new Command();

const reId = new RegExp('/([^/]+)$');

program.version(pjson.version);

program
  .option('--ttl <num>', 'Specify TTL for new records', xParseInt, DefaultTTL)
  .option('--verbose', 'Enable verbose responses');

program
  .command('add <FQDN> <address>')
  .description('Add A or AAAA record to zone')
  .action(cmd_add_record);

program
  .command('del <FQDN>')
  .description('Delete all RRs from a zone with given FQDN')
  .action(cmd_del_record);

program
  .command('ls <DOMAIN>')
  .description('List all records for zone')
  .action(cmd_list_records);

program
  .command('zones')
  .description('List all zones')
  .action(cmd_list_zones);

program.parse(process.argv);

// commander-specific parseInt (from commander docs)
function xParseInt(value, dummyPrevious) {
  // parseInt takes a string and an optional radix
  return parseInt(value);
}

// remove the "/static string/" prefix from zone ID
function shortZoneId(longId) {
  const matches = reId.exec(longId);
  if (matches) return matches[1];
  return null;
}

// ensure domain name includes trailing '.'
function dn_normalize(fqdn) {
  var re = /\.$/g;
  if (!re.test(fqdn)) {
    fqdn = fqdn + '.';
  }

  return fqdn;
}

// query AWS account zone list
function getZoneList() {
  const params = {};

  const p = route53.listHostedZones(params).promise();
  return p.then(function(data) {
    if (data.IsTruncated) {
      console.warn("TODO - Record data truncated");
    }
    return data.HostedZones;
  });
}

// lookup zone ID, given a domain name
function lookupZoneId(name) {
  const p = getZoneList();
  return p.then(function(zoneList) {

    // search for name match in zone list
    var match = null;
    zoneList.forEach(function(zone) {
      if (name === zone.Name) match = zone.Id;
    });

    return match;
  });
}

// query all records in a specific zone
function getRecordList(id) {
  const params = {
    HostedZoneId: id,
  };

  const p = route53.listResourceRecordSets(params).promise();
  return p.then(function(data) {
    if (data.IsTruncated) {
      console.warn("TODO - Record data truncated");
    }
    return data.ResourceRecordSets;
  });
}

// add resource record to zone, given zone ID
function addZoneRecord(id, subDomain, rec_type, addrStr)
{
  const params = {
    HostedZoneId: id,
    ChangeBatch: {
      Changes: [
        {
	  Action: 'CREATE',
	  ResourceRecordSet: {
	    Name: subDomain,
	    TTL: program.ttl,
	    Type: rec_type,
	    ResourceRecords: [
	      { Value: addrStr },
	    ],
	  },
	},
      ],
    },
  };

  const p = route53.changeResourceRecordSets(params).promise();
  return p;
}

// delete resource records from zone, given zone ID and RRs to delete
function delZoneRecords(id, rrs)
{
  var params = {
    HostedZoneId: id,
    ChangeBatch: {
      Changes: [],
    },
  };

  // push RR list into change list
  rrs.forEach(function(rr) {
    const changeObj = {
      Action: 'DELETE',
      ResourceRecordSet: rr,
    };

    params.ChangeBatch.Changes.push(changeObj);
  });

  const p = route53.changeResourceRecordSets(params).promise();
  return p;
}

// display zone to stdout
function print_zone(zone)
{
  var id = shortZoneId(zone.Id);
  console.log(id + "\t" + zone.Name);
}

// display zone list, verbose or not
function print_zone_list(data)
{
  if (program.verbose) {
    console.log(util.inspect(data, {showHidden: false, depth: null}))
  } else {
    data.forEach(function(zone) {
      print_zone(zone);
    });
  }
}

// CMD: list zones
function cmd_list_zones() {
  getZoneList()
    .then(print_zone_list)
    .catch(function(err) {
      console.error(err.message);
    });
}

// print a single RR
function print_rec(rec) {
  if (rec.ResourceRecords.length > 0) {
    rec.ResourceRecords.forEach(function(rr) {
      console.log(rec.Name, rec.TTL, rec.Type, rr.Value);
    });
  } else if (rec.AliasTarget) {
    console.log(rec.Name, '-', rec.Type, rec.AliasTarget.DNSName);
  } else {
    console.log(rec.Name, '-', rec.Type, '?');
  }
}

// display zone RR list, verbose or not
function print_rec_list(data)
{
  if (program.verbose) {
    console.log(util.inspect(data, {showHidden: false, depth: null}))
  } else {
    data.forEach(function(rec) {
      print_rec(rec);
    });
  }
}

// CMD: list records for a zone
function cmd_list_records(domainName) {

  domainName = dn_normalize(domainName);

  lookupZoneId(domainName)
    .then(getRecordList)
    .then(print_rec_list)
    .catch(function(err) {
      console.error(err.message);
    });
}

// CMD: add record to zone
function cmd_add_record(fqdn, addrStr) {
  fqdn = dn_normalize(fqdn);

  // parse and validate IP address and domain name supplied
  var addr = null;
  var dnr = null;
  try {
    addr = ip6addr.parse(addrStr);
    dnr = parseDomain(fqdn);
    if ((dnr.type === ParseResultType.Invalid) ||
        (dnr.type === ParseResultType.Ip)) {
      throw new Error("Invalid domain name: " + dn);
    }
  }
  catch (e) {
    console.error(e.message);
    return;
  }

  // extract domain name from FQDN
  const {subDomains, domain, topLevelDomains} = dnr;
  const dn = domain + '.' + topLevelDomains + '.';

  // assign IP address type
  var rec_type = (addr.kind() === 'ipv6' ? 'AAAA' : 'A');

  // lookup zone, given domain name
  lookupZoneId(dn)
    .then(function(id) {
      if (!id) {
        console.error("zone not found:", fqdn);
	process.exit(1);
      }

      // add zone record, given id and other inputs
      return addZoneRecord(id, fqdn, rec_type, addrStr);

    // return aws receipt
    }).then(function(added) {
      console.log("SUCCESS_RECEIPT", added);
    })
    .catch(function(err) {
      console.error(err.message);
    });
}

// CMD: delete records from zone
function cmd_del_record(fqdn) {
  fqdn = dn_normalize(fqdn);

  var dnr = null;
  try {
    dnr = parseDomain(fqdn);
    if ((dnr.type === ParseResultType.Invalid) ||
        (dnr.type === ParseResultType.Ip)) {
      throw new Error("Invalid domain name: " + dn);
    }
  }
  catch (e) {
    console.error(e.message);
    return;
  }

  const {subDomains, domain, topLevelDomains} = dnr;
  const dn = domain + '.' + topLevelDomains + '.';

  // lookup zone, given domain name
  lookupZoneId(dn)
    .then(function(id) {
      if (!id) {
        console.error("zone not found:", fqdn);
	process.exit(1);
      }

      // query list of records, for this zone
      return Promise.all([id, getRecordList(id)]);

    }).then(function([id, recordList]) {
      // gather matching RRs
      var rrs = [];
      recordList.forEach(function(rec) {
        if (rec.Name === fqdn) rrs.push(rec);
      });

      if (rrs.length === 0) {
        console.error("matching RRs not found");
	process.exit(1);
      }

      // issue AWS record deletion request
      return delZoneRecords(id, rrs);
    }).then(function(removed) {
      console.log("SUCCESS_RECEIPT", removed);

    })

    .catch(function(err) {
      console.error(err.message);
    });
}

